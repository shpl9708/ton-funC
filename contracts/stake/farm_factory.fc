#include "common/stdlib.fc";
#include "common/messages.fc";
#include "farm_factory/storage.fc";
#include "farm_factory/params.fc";
#include "farm_factory/op.fc";
#include "farm_factory/utils.fc";

()recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    slice sender_address = cs~load_msg_addr();
    
    if (flags & 1) {
        return ();
    }

    load_storage();

    (int op, int query_id) = (in_msg_body~load_uint(32), in_msg_body~load_uint(64));

    if(op == op::transfer_notification){
        


    }
    if(op == op::pool::create){
        (
            int end,
            int tot_reward, 
            int max_capacity, 
            slice token_address,
            slice reward_address
        ) = (in_msg_body~load_uint(32), in_msg_body~load_coins(), in_msg_body~load_coins(), in_msg_body~load_msg_addr(), in_msg_body~load_msg_addr());
        storage::nonce += 1;

        cell farm_data = pack_farm_data(end, end, sender_address, token_address, reward_address, tot_reward);

        cell farm_state_init = calculate_farm_state_init(farm_data, storage::farm_code);

        slice farm_address = calculate_address_by_state_init(farm_state_init);

        send_message_with_stateinit(0, farm_address, farm_state_init, begin_cell().end_cell(), CARRY_REMAINING_GAS);

        save_storage();

    }
}

slice get_farm_address(cell farm_data) method_id {
    load_storage();

    cell farm_state_init = calculate_farm_state_init(farm_data, storage::farm_code);

    slice farm_address = calculate_address_by_state_init(farm_state_init);

    return farm_address;
}
